# Our minimal suite of tests that run on each pull request
name: PR Test

env:
  COLUMNS: 120

on:
  pull_request:
    branches:
      - main
      - master
      - "v*x"

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code:
    name: Code
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: [black, isort, ruff]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install tox
      - name: Run task
        run: tox -e ${{ matrix.task }}

  manifest:
    # make sure all necessary files will be bundled in the release
    name: Check Manifest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install check-manifest
      - name: Check Manifest
        run: check-manifest

  test:
    name: ${{ matrix.platform }} ${{ matrix.python }} ${{ matrix.toxenv }} ${{ matrix.MIN_REQ && 'min_req' }}
    timeout-minutes: 30
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        python: ["3.8", "3.9", "3.10"]
        include:
          # Windows py38
          - python: 3.8
            platform: windows-latest
          # MacOS py39
          - python: 3.9
            platform: macos-latest
          # Minimum requirements
          - python: 3.8
            platform: ubuntu-20.04
            MIN_REQ: 1

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"
          cache-dependency-path: setup.cfg

      # tox and tox-gh-actions will take care of the "actual" installation
      # of python dependendencies into a virtualenv.  see tox.ini for more
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install setuptools tox tox-gh-actions
          python tools/minreq.py
        env:
          # tools/minreq.py sets all deps to their minumim stated versions
          # it is a no-op if MIN_REQ is not set
          MIN_REQ: ${{ matrix.MIN_REQ }}

      # here we pass off control of environment creation and running of tests to tox
      # tox-gh-actions, installed above, helps to convert environment variables into
      # tox "factors" ... limiting the scope of what gets tested on each platform
      # for instance, on ubuntu-latest with python 3.8, it would be equivalent to this command:
      # `tox -e py38-linux-pyqt,py38-linux-pyside`
      # see tox.ini for more
      - name: Test with tox
        run: python -m tox
        env:
          PLATFORM: ${{ matrix.platform }}
          TOXENV: ${{ matrix.toxenv }}
          NUMPY_EXPERIMENTAL_ARRAY_FUNCTION: ${{ matrix.MIN_REQ || 1 }}
          MIN_REQ: ${{ matrix.MIN_REQ }}

      - name: Coverage
        uses: codecov/codecov-action@v3

#  test_pip_install:
#    name: ubuntu-latest 3.8 pip install
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          path: pyspa-from-github
#
#      - name: Set up Python 3.9
#        uses: actions/setup-python@v4
#        with:
#          python-version: 3.9
#          cache: "pip"
#          cache-dependency-path: pyspa-from-github/setup.cfg
#
#      - name: Install this commit
#        run: |
#          # pip install this git sha directly from github
#          pip install --upgrade pip
#          pip install ./pyspa-from-github[all,testing]
#
#      - name: Test
#        run: pytest --pyargs tests --color=yes